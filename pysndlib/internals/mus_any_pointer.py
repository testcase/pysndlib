import types
from .sndlib import *


MUS_ANY_POINTER = POINTER(mus_any) 


# these getters and setters can be used
#  set_mus_scaler(gen, 1.) instead of
#  (set! (mus-scaler gen) 1.)
#  a = set_mus_scaler(gen) instead of
#  (set! a (mus-scaler gen))
# can also use the underlying 
# sndlib functions mus_scaler and mus_set_scaler
# but adding them as properties
# allows for this type of thing
#  gen.mus_scaler = 1.0
# and
# a = gen.scaler
# seems like property style setting and getting
# more in line with python style

# is this a hack? i don't know. this seems to add the properties i want
# I think in the end will need to hand craft a class to be used instead of
# the autogenerated stuff in sndlib.py


get_mus_frequency = lambda s: mus_frequency(s)
set_mus_frequency = lambda s,v : mus_set_frequency(s,v)
get_mus_phase = lambda s: mus_phase(s)
set_mus_phase = lambda s,v : mus_set_phase(s,v)
get_mus_length = lambda s: mus_length(s)
set_mus_length = lambda s,v : mus_set_length(s,v)
get_mus_increment = lambda s: mus_increment(s)
set_mus_increment =  lambda s,v : mus_set_increment(s,v)
get_mus_location = lambda s: mus_location(s)
set_mus_location = lambda s,v : mus_set_location(s,v)
get_mus_offset = lambda s: mus_offset(s)
set_mus_offset = lambda s,v : mus_set_offset(s,v)
get_mus_channels = lambda s: mus_channels(s)
set_mus_channels = lambda s,v : mus_set_channels(s,v)
get_mus_interp_type = lambda s: mus_interp_type(s)
get_mus_width = lambda s: mus_width(s)
set_mus_width = lambda s,v : mus_set_width(s,v)
get_mus_order = lambda s: mus_order(s)
set_mus_order = lambda s,v : mus_set_order(s,v)
get_mus_scaler = lambda s: mus_scaler(s)
set_mus_scaler = lambda s,v : mus_set_scaler(s,v)
get_mus_feedback = lambda s: mus_feedback(s)
set_mus_feedback = lambda s,v : mus_set_feedback(s,v)
get_mus_feedforward = lambda s: mus_feedforward(s)
set_mus_feedforward = lambda s,v : mus_set_feedforward(s,v)
get_mus_hop = lambda s: mus_hop(s)
set_mus_hop = lambda s,v : mus_set_hop(s,v)
get_mus_ramp = lambda s: mus_ramp(s)
set_mus_ramp = lambda s,v : mus_set_ramp(s,v)
get_mus_filename =  lambda s: mus_filename(s)
get_mus_channel = lambda s: mus_channel(s)

def get_mus_data(gen: MUS_ANY_POINTER):
    size = mus_length(gen)
    p = np.ctypeslib.as_array(mus_data(gen), shape=size)
    data = np.copy(p)
    return data

# TODO: mus_set_data does not make a copy so need to add to cache
# but if called repeatedly cache will keep growing. 
# maybe cache idea needs to be refined. data could
# go into other instance variable (_data) and just keep replacing
def set_mus_data(gen: mus_any, data):
    data_ptr = get_array_ptr(data)
    return mus_set_data(gen, data_ptr)
    
def get_mus_xcoeffs(gen: MUS_ANY_POINTER):
    size = mus_length(gen)
    p = np.ctypeslib.as_array(mus_xcoeffs(gen), shape=size)
    xcoeffs = np.copy(p)
    return xcoeffs
    
def get_mus_ycoeffs(gen: MUS_ANY_POINTER):
    size = mus_length(gen)
    p = np.ctypeslib.as_array(mus_ycoeffs(gen), shape=size)
    ycoeffs = np.copy(p)
    return ycoeffs


MUS_ANY_POINTER.mus_frequency = property(get_mus_frequency, set_mus_frequency, None)
MUS_ANY_POINTER.mus_phase = property(get_mus_phase, set_mus_phase, None)
MUS_ANY_POINTER.mus_length = property(get_mus_length, set_mus_length, None)
MUS_ANY_POINTER.mus_increment = property(get_mus_increment, set_mus_increment, None)
MUS_ANY_POINTER.mus_location = property(get_mus_location, set_mus_location, None)
MUS_ANY_POINTER.mus_data = property(get_mus_data, set_mus_data)
MUS_ANY_POINTER.mus_xcoeffs = property(get_mus_xcoeffs)
MUS_ANY_POINTER.mus_ycoeffs = property(get_mus_ycoeffs)
MUS_ANY_POINTER.get_xcoeff = lambda s,i : mus_xcoeff(s, i)
MUS_ANY_POINTER.set_xcoeff = lambda s,i,v : mus_set_xcoeff(s, i, v)
MUS_ANY_POINTER.get_ycoeff = lambda s,i : mus_ycoeff(s, i)
MUS_ANY_POINTER.set_ycoeff = lambda s,i,v : mus_set_ycoeff(s, i, v)
MUS_ANY_POINTER.mus_channel = property(get_mus_channel, None, None)
MUS_ANY_POINTER.mus_offset = property(get_mus_offset, set_mus_offset, None)
MUS_ANY_POINTER.mus_channels = property(get_mus_channels, set_mus_channels, None)
MUS_ANY_POINTER.mus_interp_type = property(get_mus_interp_type,None, None) # not setable
MUS_ANY_POINTER.mus_width = property(get_mus_width, set_mus_width, None)
MUS_ANY_POINTER.mus_order = property(get_mus_order, set_mus_order, None)
MUS_ANY_POINTER.mus_scaler = property(get_mus_scaler, set_mus_scaler, None)
MUS_ANY_POINTER.mus_feedback = property(get_mus_feedback, set_mus_feedback, None)
MUS_ANY_POINTER.mus_feedforward = property(get_mus_feedforward, set_mus_feedforward, None)
MUS_ANY_POINTER.mus_hop = property(get_mus_hop, set_mus_hop, None)
MUS_ANY_POINTER.mus_ramp = property(get_mus_ramp, set_mus_ramp, None)
MUS_ANY_POINTER.mus_filename = property(get_mus_filename, None, None) # not setable

# call free 
# i had some issues when implementing some callbacks
# where void pointers or mus_any pointers keep 
# needing to be cast or calling POINTER on them 
# in python. the gc would collect the python objects
# even though they referred to the same underlying 
# c pointer. so need to be careful with this in future
# just putting note here so i a remember if seeing
# any errors that could be related.
MUS_ANY_POINTER.__del__ = lambda s :  mus_free(s)
#MUS_ANY_POINTER.__del__ = lambda s :  print("freeme", s)

# this could use some work but good enough for the moment.
# maybe want to be able to switch between more verbose printing and terser
MUS_ANY_POINTER.__str__ = lambda s : f'{MUS_ANY_POINTER} {str(mus_describe(s).data, "utf-8")}'
